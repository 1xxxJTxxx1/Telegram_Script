import json
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict
from telethon import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
import pytz

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TIMEZONE = 'Asia/Tashkent'
DAYS_BACK = 7

API_ID = int(input("–í–≤–µ–¥–∏—Ç–µ API_ID: ").strip())
API_HASH = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ").strip()
GROUP_INPUT = input("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mygroup –∏–ª–∏ 123456789): ").strip()

try:
    GROUP_ID = int(GROUP_INPUT) if GROUP_INPUT.lstrip('-').isdigit() else GROUP_INPUT
except ValueError:
    GROUP_ID = GROUP_INPUT

SESSION_NAME = "thread_analyzer"
tzinfo = pytz.timezone(TIMEZONE)
now = datetime.now(tz=tzinfo)
start_date = now - timedelta(days=DAYS_BACK)

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

async def main():
    await client.start()

    try:
        entity = await client.get_entity(GROUP_ID)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        return

    if not getattr(entity, 'megagroup', False):
        print("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ñ–æ—Ä—É–º—ã
    has_forum = getattr(entity, 'forum', False)
    if has_forum:
        print("‚úÖ –§–æ—Ä—É–º—ã –≤–∫–ª—é—á–µ–Ω—ã ‚Äî –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–ø–∏–∫–∞–º.")
    else:
        print("‚ÑπÔ∏è –§–æ—Ä—É–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –∞–Ω–∞–ª–∏–∑ –ø–æ reply-—Ü–µ–ø–æ—á–∫–∞–º.")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...")
    all_messages = []
    offset_id = 0
    limit = 100

    while True:
        history = await client(GetHistoryRequest(
            peer=entity,
            offset_id=offset_id,
            offset_date=None,
            add_offset=0,
            limit=limit,
            max_id=0,
            min_id=0,
            hash=0
        ))

        if not history.messages:
            break

        batch = []
        for msg in history.messages:
            if not msg.date:
                continue
            msg_date = msg.date.astimezone(tzinfo)
            if msg_date < start_date:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ
            batch.append(msg)

        if not batch:
            break

        all_messages.extend(batch)
        offset_id = history.messages[-1].id

        # –ï—Å–ª–∏ —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞—á–∫–µ —É–∂–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if history.messages[-1].date.astimezone(tzinfo) < start_date:
            break

    print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")

    days_data = defaultdict(list)

    if has_forum:
        # === –†–µ–∂–∏–º: —Ñ–æ—Ä—É–º—ã (topics) ===
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ top_message_id (ID –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–ø–∏–∫–∞)
        topics = defaultdict(list)
        for msg in all_messages:
            if msg.reply_to and getattr(msg.reply_to, 'forum_topic', False):
                topic_id = msg.reply_to.reply_to_top_id
                topics[topic_id].append(msg)
            elif hasattr(msg, 'action') and msg.action is None:
                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ø–∏–∫–∞ (top_message)
                # –í Telethon —É –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–ø–∏–∫–∞ –Ω–µ—Ç reply_to, –Ω–æ –æ–Ω —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –∏ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ —á–µ—Ä–µ–∑ reply_to_top_id
                # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ —Å–≤–æ–π —Ç–æ–ø–∏–∫
                topics[msg.id].append(msg)

        # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–ø–∏–∫
        for topic_id, msgs in topics.items():
            if len(msgs) < 2:
                continue

            # –ù–∞–π–¥—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ø–∏–∫–∞ (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º ID)
            title_msg = next((m for m in msgs if m.id == topic_id), None)
            topic_title = (title_msg.message if title_msg else "[–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è]")[:50]

            first_msg = min(msgs, key=lambda m: m.date)
            thread_date = first_msg.date.astimezone(tzinfo).date()

            users = set()
            for m in msgs:
                if m.from_id and hasattr(m.from_id, 'user_id'):
                    users.add(m.from_id.user_id)
                else:
                    users.add('anonymous')

            days_data[thread_date].append({
                "topic": topic_title,
                "messages": len(msgs),
                "users": len(users)
            })

    else:
        # === –†–µ–∂–∏–º: reply-—Ü–µ–ø–æ—á–∫–∏ ===
        msg_dict = {msg.id: msg for msg in all_messages}
        threads = defaultdict(list)

        for msg in all_messages:
            if not msg.reply_to or not hasattr(msg.reply_to, 'reply_to_msg_id'):
                threads[msg.id].append(msg)
            else:
                reply_to_id = msg.reply_to.reply_to_msg_id
                # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –¥–æ –∫–æ—Ä–Ω—è
                current = reply_to_id
                while current in msg_dict and msg_dict[current].reply_to:
                    current = msg_dict[current].reply_to.reply_to_msg_id
                threads[current].append(msg)

        for root_id, thread_msgs in threads.items():
            if len(thread_msgs) < 2:
                continue

            root_msg = msg_dict.get(root_id)
            if not root_msg:
                continue

            thread_date = root_msg.date.astimezone(tzinfo).date()
            if thread_date < start_date.date():
                continue

            users = set()
            for m in thread_msgs:
                if m.from_id and hasattr(m.from_id, 'user_id'):
                    users.add(m.from_id.user_id)
                else:
                    users.add('anonymous')

            topic_text = (root_msg.message or '').replace('\n', ' ')[:50] or "[–ë–µ–∑ —Ç–µ–º—ã]"
            days_data[thread_date].append({
                "topic": topic_text,
                "messages": len(thread_msgs),
                "users": len(users)
            })

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –¥–Ω—è–º (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ)
    report_days = []
    current = start_date.date()
    end = now.date()
    while current <= end:
        threads_list = days_data.get(current, [])
        report_days.append({
            "date": current.isoformat(),
            "threads": threads_list
        })
        current += timedelta(days=1)

    report = {
        "timezone": TIMEZONE,
        "days": report_days
    }

    with open("report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, ensure_ascii=False, indent=2)

    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ report.json")

if __name__ == "__main__":
    asyncio.run(main())